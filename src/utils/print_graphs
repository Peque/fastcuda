#!/bin/bash

#
#  print_graphs
#
#  Copyright 2012 Miguel Sánchez de León Peque <msdeleonpeque@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#


#
# Help function.
#
function print_help {
	echo -e "\nUsage:\n"
	echo -e "  print_graph T=TITLE X=X_DATA XL=X_LABEL Y=Y_DATA1,Y_DATA2 YL=Y_LABEL D=DRAW1,DRAW2,... C=FACTOR1,FACTOR2... F=FACTOR1,FACTOR2...\n"
	echo -e "Being:\n"
	echo -e "  T    = Title."
	echo -e "  X    = Data for the 'x' axis."
	echo -e "  XL   = Label for the 'x' axis."
	echo -e "  Y    = Data list for the 'y' axis."
	echo -e "  YL   = Label for the 'y' axis."
	echo -e "  D    = List of functions/data to be drawn: { POINTS, BEZIER, CSPLINE, 00.00 }. Real number correspond to the y-error to be displayed."
	echo -e "  C    = List of factors to be compared in the same graph."
	echo -e "  F    = List of factors to be compared in different graphs."
	echo -e "  TT   = Terminal type: { pngcairo, TODO... }. See gnuplot terminal types."
	echo -e ""
}

function generate_parameters_combinations () {

	# Reset variables that may already exist from previous executions

	unset filter
	unset factor_values
	unset factor_length

	# Set factors to be compared.

	i=0
	for f in $2; do
		factor_values[$i]=$(echo "$1" | ./table_values $f)
		factor_length[$i]=$(echo "${factor_values[$i]}" | wc -w)
		((i++))
	done

	# Get all combinations, without repetitions, of the factors to be
	# compared, and set the different filters to be applied.

	nfilters=1
	for i in ${factor_length[@]}; do
		((nfilters*=($i-1)))
	done
	divided_nfilters=1
	for ((i=0; i<${#factor_values[@]}; i++)); do
		compare=${factor_values[$i]}
		column=$(echo $compare | tr " " ":" | cut -d: -f1)
		kn=$((($nfilters/((${factor_length[$i]}-1)*$divided_nfilters))))
		for ((j=0; j<((${factor_length[$i]}-1)*$divided_nfilters); j++)); do
			j_reduced=$j
			while [ $j_reduced -ge $((${factor_length[$i]}-1)) ]; do
				((j_reduced-=${factor_length[$i]}-1))
			done
			filter_by=$(echo $compare | tr " " ":" | cut -d: -f$((($j_reduced+2))))
			for ((k=0; k<$kn; k++)); do
				filter_number=$((($j*$kn+$k)))
				filter[$filter_number]="${filter[$filter_number]} ${column}=$filter_by"
			done
		done
		divided_nfilters=$((($divided_nfilters*(${factor_length[$i]}-1))))
	done

}

#
# Set program parameters.
#
for i in "$@"; do
	var=$(echo $i | cut -d= -f1)
	val=$(echo $i | cut -d= -f2 | tr "," "\n")
	case $var in
		T)   T=$val;;
		X)   X=$val;;
		XL) XL=$val;;
		Y)   Y=$val;;
		YL) YL=$val;;
		D)   D=$val;;
		C)   C=$val;;
		F)   F=$val;;
		TT) TT=$val;;
		*)  echo "ERROR: Unrecogniced parameter '$var'! Aborting..."
	esac
done

#
# Check for suficient parameters (only some of them are mandatory).
#
if [[ "$X" == "" || "$Y" == "" || "$D" == "" || "$C" == "$F" ]]; then
	print_help
	exit
fi

#
# Get synthesis report data.
#
statistics=$(./gen_report)
headers=$(echo "$statistics" | head -n 1 | tr ":" "\n")
declare -A header_pos
i=1
for header in $headers; do
	header_pos[$header]=$i
	((i++))
done
data_examples=$(echo "$statistics" | head -n 2 | tail -n 1 | tr ":" "\n")
i=1
for data in $data_examples; do
	data_example[$i]=$data
	((i++))
done

#
# Set terminal type.
#
case $TT in
	pngcairo)
		set_term="set terminal pngcairo font 'arial,10' size 600, 600; set key outside center bottom;"
		set_fext="png"
		;;
	# TODO: allow more terminal types.
	'')
		set_term="set terminal pngcairo font 'arial,10' size 600, 600; set key outside center bottom;"
		set_fext="png"
		;;
	*)
		echo "ERROR: Unrecogniced terminal type '$TT'! Using pngcairo as default..."
		set_term="set terminal pngcairo font 'arial,10' size 600, 600; set key outside center bottom;"
		set_fext="png"
		;;
esac

#
# Generate combinations of parameters to be compared in different graphs
# and store the result in a new array.
#
generate_parameters_combinations "$statistics" "$F"
filter_f=( "${filter[@]}" )

#
# Generate combinations of parameters to be compared in the same graph
# and store the result in a new array.
#
generate_parameters_combinations "$statistics" "$C"
filter_c=( "${filter[@]}" )

#
# Generate Y parameter list
#
i=0
for parameter in $(echo $Y | tr " " "\n"); do
	y_parameters[$i]=$parameter
	((i++))
done

#
# Sort options (sort by the column we are displaying in the 'x' axis)
#
if [ "$(echo ${data_example[${header_pos[$X]}]} | grep '^[0-9\.]*$')" != "" ]; then
	sort_options="-k${header_pos[$X]} -n"
else
	sort_options="-k${header_pos[$X]}"
fi

#
# Main loop iteration for plotting all graphs
#
for ((i=0; i<${#filter_f[@]}; i++)); do
	# TODO: various Y parameters!
	# TODO: use different line and point styles for different data!
	if [ "${#filter_c[@]}" == "0" ]; then
		# Prevent existing filtered_data file
		rm -f filtered_data
		# Set gnuplot options
		command="$set_term"
		command="$command set xlabel '$XL';"
		command="$command set ylabel '$YL';"
		command="$command set title '$T $Y $(echo "${filter_f[$i]}" | tr " " "\n")';"
		command="$command set output './build/$T $Y ${filter_f[$i]}.$set_fext';"
		plot_data=""
		for ((j=0; j<${#y_parameters[@]}; j++)); do
			data="'-' using ${header_pos[$X]}:${header_pos[${y_parameters[$j]}]}"
			# Define which functions/data to be drawn
			D=$(echo $D | tr " " "\n")
			for d in $D; do
				# Generate filtered data
				if [ -f filtered_data ]; then
					echo "e" >> filtered_data
				fi
				echo "$statistics" | ./table_filter ${filter_f[$i]} | sed 's/:/\t/g' | sort $sort_options >> filtered_data
				if [ "$plot_data" != "" ]; then
					plot_data="$plot_data,"
				fi
				case $d in
					POINTS)  plot_data="$plot_data $data title '${y_parameters[$j]} (points)' with points lc rgb '#000000'";;
					BEZIER)  plot_data="$plot_data $data smooth bezier title '${y_parameters[$j]} (bezier)' with lines";;
					CSPLINE) plot_data="$plot_data $data smooth cspline title '${y_parameters[$j]} (spline)' with lines";;
					*)       plot_data="$plot_data $data:($d) title '${y_parameters[$j]} (yerr=$d)' with yerrorbars lc rgb '#888888'";;
				esac
			done
		done
		# Plot data
		cat filtered_data | gnuplot -p -e "$command plot $plot_data"
	else
		# Prevent existing filtered_data file
		rm -f filtered_data
		# Set gnuplot options
		command="$set_term"
		command="$command set xlabel '$XL';"
		command="$command set ylabel '$YL';"
		command="$command set title '$T $Y $(echo "${filter_f[$i]}" | tr " " "\n")';"
		command="$command set output './build/$T $Y ${filter_f[$i]}.$set_fext';"
		plot_data=""
		for ((j=0; j<${#filter_c[@]}; j++)); do
			for ((k=0; k<${#y_parameters[@]}; k++)); do
				data="'-' using ${header_pos[$X]}:${header_pos[${y_parameters[$k]}]}"
				# Define which functions/data to be drawn
				D=$(echo $D | tr " " "\n")
				for d in $D; do
					# Generate filtered data
					if [ -f filtered_data ]; then
						echo "e" >> filtered_data
					fi
					echo "$statistics" | ./table_filter ${filter_c[$j]} ${filter_f[$i]} | sed 's/:/\t/g' | sort $sort_options >> filtered_data
					if [ "$plot_data" != "" ]; then
						plot_data="$plot_data,"
					fi
					case $d in
						POINTS)  plot_data="$plot_data $data title '${y_parameters[$k]} - ${filter_c[$j]} (points)' with points lc rgb '#000000'";;
						BEZIER)  plot_data="$plot_data $data smooth bezier title '${y_parameters[$k]} - ${filter_c[$j]} (bezier)' with lines";;
						CSPLINE) plot_data="$plot_data $data smooth cspline title '${y_parameters[$k]} - ${filter_c[$j]} (spline)' with lines";;
						*)       plot_data="$plot_data $data:($d) title '${y_parameters[$k]} - ${filter_c[$j]} (yerr=$d)' with yerrorbars lc rgb '#888888'";;
					esac
				done
			done
		done
		# Plot data
		cat filtered_data | gnuplot -p -e "$command plot $plot_data"
	fi
done

rm filtered_data
