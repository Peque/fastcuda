#!/bin/bash

#
#  print_graphs
#
#  Copyright 2012 Miguel Sánchez de León Peque <msdeleonpeque@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#


#
# Help function.
#
function print_help {
	echo -e "\nUsage:\n"
	echo -e "  print_graph T=TITLE X=X_DATA XL=X_LABEL Y=Y_DATA1,Y_DATA2 YL=Y_LABEL D=DRAW1,DRAW2,... C=FACTOR1,FACTOR2... F=FACTOR1,FACTOR2...\n"
	echo -e "Being:\n"
	echo -e "  T    = Title."
	echo -e "  X    = Data for the 'x' axis."
	echo -e "  XL   = Label for the 'x' axis."
	echo -e "  Y    = Data list for the 'y' axis."
	echo -e "  YL   = Label for the 'y' axis."
	echo -e "  D    = List of functions/data to be drawn: { POINTS, BEZIER, CSPLINE, 00.00 }. Real number correspond to the y-error to be displayed."
	echo -e "  C    = List of factors to be compared in the same graph."
	echo -e "  F    = List of factors to be compared in different graphs."
	echo -e ""
}

function generate_parameters_combinations () {

	# Reset variables that may already exist from previous executions

	unset filter
	unset factor_values
	unset factor_length

	# Set factors to be compared.

	i=0
	for f in $2; do
		factor_values[$i]=$(echo "$1" | ./table_values $f)
		factor_length[$i]=$(echo "${factor_values[$i]}" | wc -w)
		((i++))
	done

	# Get all combinations, without repetitions, of the factors to be
	# compared, and set the different filters to be applied.

	nfilters=1
	for i in ${factor_length[@]}; do
		((nfilters*=($i-1)))
	done
	divided_nfilters=1
	for ((i=0; i<${#factor_values[@]}; i++)); do
		compare=${factor_values[$i]}
		column=$(echo $compare | tr " " ":" | cut -d: -f1)
		kn=$((($nfilters/((${factor_length[$i]}-1)*$divided_nfilters))))
		for ((j=0; j<((${factor_length[$i]}-1)*$divided_nfilters); j++)); do
			j_reduced=$j
			while [ $j_reduced -ge $((${factor_length[$i]}-1)) ]; do
				((j_reduced-=${factor_length[$i]}-1))
			done
			filter_by=$(echo $compare | tr " " ":" | cut -d: -f$((($j_reduced+2))))
			for ((k=0; k<$kn; k++)); do
				filter_number=$((($j*$kn+$k)))
				filter[$filter_number]="${filter[$filter_number]} ${column}=$filter_by"
			done
		done
		divided_nfilters=$((($divided_nfilters*(${factor_length[$i]}-1))))
	done

}

#
# Set program parameters.
#
for i in $@; do
	var=$(echo $i | cut -d= -f1)
	val=$(echo $i | cut -d= -f2 | tr "," "\n")
	case $var in
		T)  T=$val;;
		X)  X=$val;;
		XL) XL=$val;;
		Y)  Y=$val;;
		YL) YL=$val;;
		D)  D=$val;;
		C)  C=$val;;
		F)  F=$val;;
		*)  echo "ERROR: Unrecogniced parameter '$var'! Aborting..."
	esac
done

#
# Check for suficient parameters (only some of them are mandatory).
#
if [[ "$X" == "" || "$Y" == "" || "$D" == "" || "$C" == "$F" ]]; then
	print_help
	exit
fi

#
# Get synthesis report data.
#
statistics=$(./gen_statistics)
headers=$(echo "$statistics" | head -n 1 | tr ":" "\n")
declare -A header_pos
i=1
for header in $headers; do
	header_pos[$header]=$i
	((i++))
done

#
# Generate combinations of parameters to be compared in different graphs
# and store the result in a new array.
#
generate_parameters_combinations "$statistics" "$F"
filter_f=( "${filter[@]}" )

#
# Generate combinations of parameters to be compared in the same graph
# and store the result in a new array.
#
generate_parameters_combinations "$statistics" "$C"
filter_c=( "${filter[@]}" )

for ((i=0; i<${#filter_f[@]}; i++)); do
	# TODO: various Y parameters!
	if [ "${#filter_c[@]}" == "0" ]; then
		# TODO: sort by the column we are displaying in the 'x' axis
		echo "$statistics" | ./table_filter ${filter_f[$i]} | sed 's/:/\t/g' | sort -k +1n  > filtered_data
		command="set terminal pngcairo font 'arial,10' size 600, 400; set key outside right center;"
		command="$command set xlabel '$XL';"
		command="$command set ylabel '$YL';"
		command="$command set title '$T TODO: use other parameters here';"
		command="$command set output 'TODO_$i.png';";
		data="'filtered_data' using ${header_pos[$X]}:${header_pos[$Y]}"
		plot_data=""
		D=$(echo $D | tr " " "\n")
		for d in $D; do
			if [ "$plot_data" != "" ]; then
				plot_data="$plot_data,"
			fi
			case $d in
				POINTS)  plot_data="$plot_data $data title '$Y (points)' with points pt 7 lc rgb '#000000'";;
				BEZIER)  plot_data="$plot_data $data smooth bezier title '$Y (bezier)' with lines lt 0 lc rgb '#000000'";;
				CSPLINE) plot_data="$plot_data $data smooth cspline title '$Y (cspline)' with lines lt 0 lc rgb '#000000'";;
				*)       plot_data="$plot_data $data:($d) title '$Y (yerr=$d)' with yerrorbars lc rgb '#888888'";;
			esac
		done
		echo "$plot_data"
		gnuplot -p -e "$command plot $plot_data"
	else
		# TODO: C parameter not empty!
		echo "TODO: C parameter not empty!"
	fi
done
